{"version":3,"sources":["Views/Home/assets/social-media.png","Views/Home/Components/BarLoginRegister/BarLoginRegister.jsx","Views/Home/Home.jsx","Views/Register/Register.jsx","Views/Login/Login.jsx","Components/HeaderBar/Components/SearchBar/SearchBar.jsx","Components/HeaderBar/HeaderBar.jsx","Components/Chat/Chat.jsx","Views/Feed/Components/NewPost/NewPost.jsx","Components/ShowPosts/Components/Comments/Comment.jsx","Components/ShowPosts/Components/Comments/Comments.jsx","Components/ShowPosts/Components/IconLike/IconLike.jsx","Components/ShowPosts/Components/Post/Post.jsx","Components/ShowPosts/ShowPosts.jsx","utils/index.js","Views/Feed/Components/PostsFriends/PostsFriends.jsx","Views/Feed/Feed.jsx","Views/Profile/Components/InfoUser/InfoUser.jsx","Components/SpinnerLoading/SpinnerLoading.jsx","Views/Profile/Components/PostsUser/PostsUser.jsx","Views/Profile/Components/AddDeleteContact/ADC.jsx","Views/Profile/Profile.jsx","Views/Chat/Components/ListFriends/ListFriends.jsx","Views/Chat/Components/Messages/SendMessage.jsx","Views/Chat/Components/Messages/ListMessages.jsx","Views/Chat/Components/Messages/Messages.jsx","Views/Chat/Chat.jsx","Router.jsx","store.js","apolloClient.js","App.js","reportWebVitals.js","index.js"],"names":["BarLoginRegister","AppBar","position","Toolbar","id","className","to","Button","Home","Grid","container","item","xs","md","Typography","variant","gutterBottom","style","width","color","src","imgHome","alt","REGISTER_MUTATION","gql","connect","dispatch","setUser","user","type","useState","username","setUsername","email","setEmail","password","setPassword","birthday","setBirthday","history","useHistory","useMutation","register","handleSubmit","event","a","preventDefault","variables","data","token","localStorage","setItem","push","textAlign","onSubmit","TextField","label","onChange","e","currentTarget","value","defaultValue","InputLabelProps","shrink","LOGIN_MUTATION","login","Mutation_GETUSERS","ListUsers","forwardRef","ref","users","map","SearchBar","usersFectch","setUsers","getUsers","refList","useRef","useEffect","handleClick","current","contains","target","document","addEventListener","removeEventListener","handleChange","alignSelf","InputBase","placeholder","state","anchorMenu","setAnchorMenu","handleClose","fontSize","onClick","Menu","anchorEl","keepMounted","open","Boolean","onClose","MenuItem","removeItem","window","location","QUERY_GETUSERBYID","ListFriends","friends","friend","userid","setFriends","useQuery","loading","getUserbyID","Accordion","AccordionSummary","Badge","badgeContent","length","AccordionDetails","MUTATION_CREATE_POST","NewPost","post","setPost","createPost","handlePost","body","console","log","Comment","comment","deleteComment","anchor","setAnchor","createdAt","IconButton","moment","fromNow","MoreVert","MUTATION_CREATECOMMENT","MUTATION_DELETECOMMENT","Comments","comments","postid","createComment","deleteCommentM","bodyComment","setBodyComment","commentsA","setCommentsA","makePost","unshift","commentid","filter","multiline","Send","LIKEPOST_MUTATION","REMOVELIKEPOST_MUTATION","IconLike","likeCount","likes","liked","setLiked","likeCountT","setLikeCount","likePost","removelikePost","sendLike","removeLike","findIndex","like","background","startIcon","Favorite","showComments","setShowComments","imgProfile","imgPost","Card","CardHeader","avatar","Avatar","action","aria-label","title","subheader","CardMedia","image","CardContent","component","CardActions","disableSpacing","Forum","Share","ShowPosts","posts","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","GETPOSTS_MUTATION","getPosts","friendsPosts","setFriendsPosts","promises","res","Promise","all","responses","concat","slice","fetchData","Feed","QUERY_GETUSER","InfoUser","useParams","SpinnerLoading","PostsUser","setData","fetch","MUTATION_ADDFRIEND","MUTATION_REMOVEFRIEND","AddFriend","setFriend","addFriend","handleCLick","RemoveFriend","removeFriend","find","Profile","padding","setActiveChat","MUTATION_SENDMESSAGE","SendMessage","_chatid","bodyMessage","setBodyMessage","sendMessage","chatid","MUTATION_CREATECHAT","MUTATION_GETCHAT","activeChat","createChat","getChat","setChatid","messages","setMessages","fetchCreateChat","partnerid","partnername","_id","fetchGetChat","message","body_message","sender_username","reverse","Messages","chats","chat","QUERY_GETCHATS","VERIFYTOKEN_MUTATION","getItem","verifyToken","exact","path","initialState","createStore","httpLink","HttpLink","uri","process","authMiddleware","ApolloLink","operation","forward","setContext","headers","authorization","client","ApolloClient","link","cache","InMemoryCache","App","store","clientApollo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3af18eea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/social-media.5e1ad944.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {AppBar, Toolbar, Button} from '@material-ui/core';\n\nimport './BarLoginRegister.css';\n\n\nconst BarLoginRegister = () => {\n    return(\n        <AppBar position=\"static\">\n            <Toolbar id=\"buttons-bar-container\">\n                <Link className=\"link-to-register\" to=\"/login\">\n                    <Button  className=\"button-link\">\n                        Login\n                    </Button>\n                </Link>\n                <Link className=\"link-to-register\" to=\"/register\">\n                    <Button className=\"button-link\">\n                        Register\n                    </Button>\n                </Link>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default BarLoginRegister;","import React from 'react';\n\nimport {Button, Grid, Typography} from '@material-ui/core';\nimport {Link    } from 'react-router-dom';\nimport imgHome from './assets/social-media.png';\nimport BarLoginRegister from './Components/BarLoginRegister/BarLoginRegister';\n\nimport './Home.css';\n\nconst Home = () => {\n    return(\n        <>\n        <BarLoginRegister/>\n\n        <div className=\"container-home\">\n            <Grid className='grid-home' container>\n                <Grid className=\"register-home\" item xs={12} md={6}>\n                    <Typography variant=\"h2\" gutterBottom>\n                        Are you new here?\n                    </Typography>\n                    \n                    <Typography variant=\"h3\">\n                        you can register here.\n                    </Typography>\n                    <Link className=\"link-to-register\" to=\"/register\">\n                        <Button style={{width:'95%'}} variant=\"contained\" color=\"primary\">\n                            Register\n                        </Button>\n                    </Link>\n                    \n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <img className=\"img-home\" src={imgHome} alt=\"img-home\"/>\n                </Grid>\n            </Grid>\n        </div>\n        </>\n    );\n}\n\nexport default Home;","import React,{useState} from 'react';\nimport {Button, TextField, Typography} from '@material-ui/core';\nimport { gql, useMutation } from '@apollo/client';\nimport { useHistory } from \"react-router-dom\";\nimport {connect} from 'react-redux';\n\nimport './Register.css';\n\nconst REGISTER_MUTATION = gql`\n    mutation Register($username:String!, $password:String!, $birthday:String!, $email:String!){ \n        register(\n            registerInput: {\n            username:$username\n            email: $email\n            password: $password\n            birthday: $birthday\n            }\n        ){\n            id\n            token\n            email\n            username\n        }\n    }\n`;\n\nconst Register = ({setUser}) => {\n    const [username, setUsername] = useState(null);\n    const [email, setEmail] = useState(null);\n    const [password, setPassword] = useState(null);\n    const [birthday, setBirthday] = useState(null);\n\n    let history = useHistory();\n\n    const [register] = useMutation(REGISTER_MUTATION);\n\n    const handleSubmit =  async (event) => {\n        event.preventDefault();\n        if(!username || !email || !password || !birthday)return; \n\n        let {data} = await register({\n            variables:{username, email, password, birthday}\n        });\n        let {id, token} = data.register;\n        \n        localStorage.setItem('token',token);\n\n        let user = {\n            id,\n            email,\n            username\n        };\n\n        setUser(user);\n        history.push('/feed');\n\n    }\n    return(\n        <div id=\"register-container\">\n            <div id=\"form-register-container\">\n                <Typography variant=\"h4\" style={{textAlign:'center'}}>Register</Typography>\n                <form onSubmit={handleSubmit}>\n                    <TextField className=\"textfield-register\" label=\"username\" onChange={(e)=>setUsername(e.currentTarget.value)}/>\n                    <TextField className=\"textfield-register\" type=\"email\" label=\"email\" onChange={(e)=>setEmail(e.currentTarget.value)}/>\n                    <TextField className=\"textfield-register\" type=\"password\" label=\"password\" onChange={(e)=>setPassword(e.currentTarget.value)}/>\n                    <TextField\n                        label=\"birthday\"\n                        type=\"date\"\n                        className=\"textfield-register\"\n                        defaultValue=\"2017-05-24\"\n                        InputLabelProps={{\n                        shrink: true,\n                        }}\n                        onChange={(e)=>setBirthday(e.currentTarget.value)}\n                    />\n                    <Button className=\"submit-register\" variant=\"contained\" color=\"primary\" type=\"submit\">Register</Button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nconst dipatchToProps = dispatch => {\n    return({\n        setUser(user){\n            dispatch({\n                type:\"SET_USER\",\n                user\n            });\n        }\n    });\n}\n\nexport default connect(null, dipatchToProps)(Register);","import React,{useState} from 'react';\nimport {connect} from 'react-redux';\nimport { gql, useMutation } from '@apollo/client';\nimport { useHistory } from \"react-router-dom\";\nimport {Typography, TextField, Button} from '@material-ui/core';\n\n\nconst LOGIN_MUTATION = gql`\n    mutation Login($password:String!, $email:String!){ \n        login(\n            \n            email: $email\n            password: $password\n            \n        ){\n            id\n            token\n            username\n        }\n    }\n`;\n\nconst Login = ({setUser}) => {\n    const [email, setEmail] = useState();\n    const [password, setPassword] = useState();\n\n    const [login] = useMutation(LOGIN_MUTATION);\n    \n    let history = useHistory();\n\n    const handleSubmit = async e => {\n        e.preventDefault();\n        if(!email || !password)return;\n\n        let {data} = await login({variables:{email, password}});\n\n        let {id, token, username} = data.login;\n        \n        localStorage.setItem('token',token);\n\n        let user = {\n            id,\n            email,\n            username\n        };\n\n        setUser(user);\n        history.push('/feed');\n\n    }\n    return(\n        <div id=\"register-container\">\n            <div id=\"form-register-container\">\n                <Typography variant=\"h4\" style={{textAlign:'center'}}>Register</Typography>\n                <form onSubmit={handleSubmit}>\n                    <TextField className=\"textfield-register\" type=\"email\" label=\"email\" onChange={(e)=>setEmail(e.currentTarget.value)}/>\n                    <TextField className=\"textfield-register\" type=\"password\" label=\"password\" onChange={(e)=>setPassword(e.currentTarget.value)}/>\n                \n                    <Button className=\"submit-register\" variant=\"contained\" color=\"primary\" type=\"submit\">Register</Button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nconst dipatchToProps = dispatch => {\n    return({\n        setUser(user){\n            dispatch({\n                type:\"SET_USER\",\n                user\n            });\n        }\n    });\n}\n\nexport default connect(null, dipatchToProps)(Login);","import React,{useState, useEffect, forwardRef} from 'react';\nimport {Link} from 'react-router-dom';\nimport {InputBase, Typography} from '@material-ui/core';\n\nimport {gql, useMutation} from '@apollo/client';\n\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport './SearchBar.css';\nimport { useRef } from 'react';\n\nconst Mutation_GETUSERS = gql`\n    mutation GetUsers($username:String!){\n        getUsers(username:$username){\n            id,\n            username\n        }\n    }\n`;\n\nconst ListUsers = forwardRef( ({users},ref) => {\n\n    return(\n        <div ref={ref} className=\"users-list\" >\n            {users.map(user => {\n                return(\n                    <Link to={`/profile/${user.id}`} key={user.id}>\n                        <div className=\"item-user\" >\n                            <Typography variant=\"body1\">{user.username}</Typography>\n                        </div>\n                    </Link>\n                );\n            })}\n        </div>\n    );\n})\n\nconst SearchBar = () => {\n    const [usersFectch, setUsers] = useState(null);\n    const [getUsers] = useMutation(Mutation_GETUSERS);\n    const refList = useRef(null);\n\n    useEffect(()=>{\n        const handleClick = (event) => {\n\n            if (refList.current && !refList.current.contains(event.target)) {\n                setUsers(null);\n            }\n        }\n        document.addEventListener(\"click\",handleClick);\n\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"click\",handleClick);\n        };\n    })\n\n    const handleChange = async(e) => {\n        let username = e.currentTarget.value;\n        if(username === '')return setUsers(null);\n\n        let {data} = await getUsers({variables:{username}});\n        setUsers(data.getUsers);\n\n    }\n\n    return(\n        <div className=\"searchbar-container\">\n            \n            <SearchIcon style={{alignSelf:'center'}} />\n            \n            <InputBase\n                placeholder=\"Search…\"\n                className=\"inputSearch\"\n                onChange={handleChange}\n            />\n\n            {usersFectch?<ListUsers ref={refList} users={usersFectch} />:null}\n            \n       </div>        \n    )\n}\n\nexport default SearchBar;","import React,{useState} from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport HomeIcon from '@material-ui/icons/Home';\nimport {AppBar, Button,Menu, MenuItem, Toolbar} from '@material-ui/core';\n\nimport SearchBar from './Components/SearchBar/SearchBar';\n\nimport './HeaderBar.css';\n\nconst HeaderBar = ({user}) => {\n    const [anchorMenu, setAnchorMenu] = useState(null);\n    const history = useHistory();\n\n    const handleClick = (event) => {\n      setAnchorMenu(event.currentTarget);\n    };\n  \n    const handleClose = () => {\n      setAnchorMenu(null);\n    };\n    const logout = () => {\n        localStorage.removeItem('token');\n        window.location = '/'\n    }\n    \n    return(\n        <header>\n            <AppBar position=\"static\">\n                <Toolbar className=\"toolbar-header\">\n                    <Link to='/feed'>\n                        <Button className=\"profile-button\">\n                            <HomeIcon style={{fontSize:40}}/>\n                        </Button>\n                    </Link>\n                    <SearchBar/>\n                    <Button className=\"profile-button\" onClick={handleClick}>\n                        <AccountCircleIcon style={{fontSize:40}}/>\n                    </Button>\n                </Toolbar>\n            </AppBar>\n\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorMenu}\n                keepMounted\n                open={Boolean(anchorMenu)}\n                onClose={handleClose}\n                >\n                <MenuItem onClick={handleClose}>\n                    <Link to={`profile/${user.id}`} >Profile</Link>\n                </MenuItem>\n                <MenuItem onClick={handleClose}>Settings</MenuItem>\n                <MenuItem onClick={logout}>Logout</MenuItem>\n            </Menu>\n        </header>\n    );\n}\n\nconst stateToProps = state => {\n    return({\n        user:state.user\n    });\n}\n\nexport default connect(stateToProps, null)(HeaderBar);\n","import React, { useEffect }  from 'react';\nimport {gql, useQuery} from '@apollo/client';\nimport {Link} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport {Accordion, AccordionSummary, AccordionDetails, Badge, Typography} from '@material-ui/core';\n\nimport './Chat.css';\n\nconst QUERY_GETUSERBYID = gql`\n    query GetUserbyID($userid:ID){\n        getUserbyID(userid:$userid){\n            friends{\n                userid\n                username\n            }\n        }\n    }\n`;\n\nconst ListFriends = ({friends}) => {\n    if(!friends)return <div>No friends yet</div>\n    return(\n        \n        <div id=\"friends-chat-list\">\n            {friends.map(friend => {\n                const {username, userid} = friend;\n                return(\n                    <Link to=\"/chat\" className=\"item-friend\" key={userid}>\n                        <AccountCircleIcon style={{color:'#2196f3'}}/>\n                        <span className=\"item-friend-username\">\n                            {username}\n                        </span>\n                    </Link>\n                );\n            })}\n        </div>\n    );\n}\n\nconst Chat = ({user, friends, setFriends}) => {\n    \n    const {data, loading} = useQuery(QUERY_GETUSERBYID,{variables:{userid:user.id}});\n    \n    useEffect(()=>{\n        if(loading)return;\n        setFriends(data.getUserbyID.friends)\n    },[loading,data, setFriends]);\n\n    return(\n        <Accordion id=\"chat-container\">\n            <AccordionSummary>\n                <Typography id=\"title-chat\" variant=\"h6\">\n                    <Badge \n                        badgeContent={friends?friends.length:0} \n                        color=\"primary\"\n                    >\n                        Friends Active\n                    </Badge>\n                </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n            \n                    \n                {!loading ? \n                <ListFriends friends={friends} /> :\n                <div>loading</div>\n                }\n\n            </AccordionDetails>\n        </Accordion>\n    );\n}\n\nconst stateToProps = state => {\n    return({\n        user: state.user,\n        friends: state.friends\n    });\n}\n\nconst dispatchToProps = dispatch => {\n    return({\n        setFriends(friends){\n            dispatch({\n                type:'SET_FRIENDS',\n                friends\n            });\n        }\n    })\n}\n\nexport default connect(stateToProps, dispatchToProps)(Chat);","import React, { useState } from 'react';\nimport {gql, useMutation} from '@apollo/client';\nimport {Button, Typography} from '@material-ui/core';\nimport './NewPost.css';\n\nconst MUTATION_CREATE_POST = gql`\n    mutation CreatePost($body:String!){\n        createPost(body:$body){id}\n    }\n`;\n\nconst NewPost = () => {\n    const [post, setPost] = useState(\"\");\n    const [createPost] = useMutation(MUTATION_CREATE_POST);\n\n    const handlePost = async (event) => {\n        event.preventDefault();\n\n        if(!post.length===0)return;\n        \n        let {data} = await createPost({variables:{body:post}});\n        \n        let {id} = data.createPost;\n\n        setPost(\"\");\n        console.log(id);\n\n    }\n    const onChangeText = (event) => {\n        setPost(event.currentTarget.value);\n    }\n    return(\n        <main id=\"new-post-container\">\n            <div className=\"form-container-post\">\n                <Typography variant=\"h5\">Write a new post</Typography>\n                <form onSubmit={handlePost}>\n                    <textarea value={post} placeholder=\"What's in your mind?\" className=\"input-post\" onChange={onChangeText}/>\n                    <div className=\"button-post-container\">\n                        <Button  type=\"submit\" variant=\"contained\" color=\"primary\">Post</Button>\n                    </div>\n                </form>\n            </div>\n        </main>\n    );\n}\n\nexport default NewPost","import React, { useState } from 'react';\nimport moment from 'moment';\nimport {IconButton, Menu , MenuItem, Typography} from '@material-ui/core';\nimport {AccountCircle, MoreVert} from '@material-ui/icons';\n\nconst Comment = ({comment, deleteComment}) => {\n    const [anchor, setAnchor] = useState(null);\n    const {body, createdAt, username, id } = comment;\n\n    const handleClick = (event) => {\n        setAnchor(event.currentTarget);\n    };\n    \n    const handleClose = () => {\n        setAnchor(null);\n    };\n    return(\n        <>\n        <div className=\"comment\">\n            <div className=\"comment-header\">\n                <div className=\"comment-header-user\">\n                    <IconButton>\n                        <AccountCircle/>\n                    </IconButton>\n                    <Typography className=\"username-comment\" variant=\"body2\">{username}</Typography>\n                    <Typography className=\"time-comment\">{moment(createdAt).fromNow()}</Typography>\n                </div>\n                <IconButton>\n                    <MoreVert onClick={handleClick}/>\n                </IconButton>\n            </div>\n            <Typography className=\"comment-body\" variant=\"body1\">{body}</Typography>\n        </div>\n        <Menu\n            id=\"simple-menu\"\n            anchorEl={anchor}\n            keepMounted\n            open={Boolean(anchor)}\n            onClose={handleClose}\n            >\n            <MenuItem onClick={deleteComment(id)} >Delete comment</MenuItem>\n        </Menu>\n        </>\n    );\n}\n\nexport default Comment;","import React, { useState }  from 'react';\nimport {gql, useMutation} from '@apollo/client';\nimport {IconButton, InputBase} from '@material-ui/core';\nimport { Send }from '@material-ui/icons';\nimport Comment from './Comment';\n\nimport './Comments.css';\n\nconst MUTATION_CREATECOMMENT = gql`\n    mutation CreateComment($postid:ID, $body:String){\n        createComment(postid:$postid, body:$body){\n            id\n            body\n            username\n            createdAt\n        }\n    }\n`;\n\nconst MUTATION_DELETECOMMENT = gql`\n    mutation DeleteComment($postid:ID, $commentid:ID){\n        deleteComment(postid:$postid, commentid:$commentid)\n    }\n`;\n\n\nconst Comments = ({comments, postid}) => {\n\n    const [createComment] = useMutation(MUTATION_CREATECOMMENT);\n    const [deleteCommentM] = useMutation(MUTATION_DELETECOMMENT);\n\n    const [bodyComment, setBodyComment] = useState(\"\");\n    let [commentsA, setCommentsA] = useState(comments);\n\n    const makePost = async () => {\n        if(bodyComment.length === 0)return;\n        let {data} = await createComment({variables:{postid,body:bodyComment}});\n        commentsA.unshift(data.createComment);\n    \n        setBodyComment('');\n        setCommentsA(commentsA);\n    }\n\n    const deleteComment =  (commentid) => async() => {\n        commentsA =  commentsA.filter(comment => comment.id !== commentid);\n        setCommentsA(commentsA);\n\n        await deleteCommentM({variables:{commentid, postid}});\n    }\n    return(\n        <div>\n            <div className=\"input-comment-container\">\n                <InputBase\n                    className=\"input-comment\"\n                    placeholder=\"Write a comment\"\n                    multiline\n                    value={bodyComment}\n                    onChange={(e)=>setBodyComment(e.currentTarget.value)}\n                />  \n                <IconButton className=\"send-icon\" onClick={makePost}>\n                    <Send/>\n                </IconButton>\n            </div>\n            {commentsA.map(comment=>{\n                return <Comment key={comment.id} comment={comment} deleteComment={deleteComment}/>\n            })}\n        </div>\n    );\n}\n\nexport default Comments;","import React,{useState, useEffect} from 'react';\n\nimport {gql, useMutation} from '@apollo/client';\n\nimport {Button} from '@material-ui/core';\nimport {Favorite} from '@material-ui/icons';\n\n\nconst LIKEPOST_MUTATION = gql`\n    mutation LikePost($postid:ID!){\n        likePost(postid:$postid)\n    }\n`;\nconst REMOVELIKEPOST_MUTATION = gql`\n    mutation RemoveLikePost($postid:ID!){\n        removeLikePost(postid:$postid)\n    }\n`;\n\nconst IconLike = ({likeCount, postid, likes, userid}) => {\n    const [liked, setLiked] = useState(false);\n    const [likeCountT, setLikeCount] = useState(likeCount);\n\n    const [likePost] = useMutation(LIKEPOST_MUTATION);\n    const [removelikePost] = useMutation(REMOVELIKEPOST_MUTATION);\n\n    const  sendLike = async () => {\n        await likePost({variables:{postid}});\n        setLiked(true)\n        setLikeCount(likeCountT+1);\n    }\n\n    const removeLike = async () => {\n        await removelikePost({variables:{postid}});\n        setLiked(false);\n        setLikeCount(likeCountT-1);\n    }\n\n    useEffect(()=>{\n        let indexLike = likes.findIndex(like => like.userid === userid );\n        if(indexLike !== -1) setLiked(true);\n    },[setLiked, likes, userid]);\n\n    return(\n        <>\n            {liked?\n            <Button \n                variant=\"contained\"\n                style={{background:\"#f50057\",color:'#fff'}}\n                startIcon={<Favorite />}\n                onClick={removeLike}\n            >\n                {likeCountT}\n            </Button>:\n            <Button\n                variant=\"contained\"\n                color=\"default\"\n                startIcon={<Favorite />}\n                onClick={sendLike}\n            >\n                {likeCountT}\n            </Button>}\n        </>\n    )\n}\n\nexport default IconLike;","import React, {useState} from 'react';\n\nimport moment from 'moment';\nimport {connect} from 'react-redux';\n\n\nimport {Avatar, Card, CardHeader, CardMedia, CardActions, IconButton, CardContent, Typography} from '@material-ui/core';\nimport {AccountCircle, Forum, MoreVert,  Share} from '@material-ui/icons';\n\nimport Comments from '../Comments/Comments';\nimport IconLike from '../IconLike/IconLike';\n\n\nimport './Post.css';\n\n\nconst Post = ({post, user}) => {\n    const [showComments, setShowComments] = useState(false);\n    const {body, comments, imgProfile, imgPost, createdAt, likeCount, likes, username } = post;\n    const postid = post.id;\n    return(\n        \n            <Card className=\"post-card\" key={post.id}>\n                <CardHeader\n                    avatar={imgProfile?<Avatar src={imgProfile}/>:<AccountCircle className=\"post-avatar\" style={{fontSize:40}}/>}\n                    action={\n                    <IconButton aria-label=\"settings\">\n                        <MoreVert/>\n                    </IconButton>\n                    }\n                    title={username}\n                    subheader={moment(createdAt).fromNow()}\n                />\n                {imgPost ? <CardMedia image={imgPost}/> : null}\n                \n                <CardContent>\n                    <Typography variant=\"body1\" component=\"p\">\n                        {body}\n                    </Typography>\n                </CardContent>\n\n                <CardActions className=\"card-actions-post\" disableSpacing>\n                    \n                    <IconLike userid={user.id} likes={likes} likeCount={likeCount} postid={postid}/>\n\n                    <IconButton className={showComments?'active-comments':null} aria-label=\"forum\" onClick={()=>setShowComments(!showComments)}>\n                        <Forum />\n                    </IconButton>\n\n                    <IconButton aria-label=\"share\">\n                        <Share />\n                    </IconButton>\n                    \n                </CardActions>\n                <div className={showComments?'show-comments':'hidde-comments'}>\n                    <Comments comments={comments} postid={postid}/>\n                </div>\n            </Card>\n        \n    );\n}\n\n\nconst stateToProps = state => {\n    return({\n        user:state.user\n    });\n}\n\nexport default connect(stateToProps, null)(Post);","import React from 'react';\n\nimport './ShowPosts.css';\nimport Post from './Components/Post/Post';\n\n\nconst ShowPosts = ({posts}) => {\n    return(\n        <>\n            {posts.map(post => <Post key={post.id} post={post}/>)}\n        </>\n    );\n}\n\n\n\nexport default ShowPosts;","export const shuffle = (array) => {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}","import React, {useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {gql, useMutation} from '@apollo/client';\nimport { useState } from 'react';\nimport ShowPosts from '../../../../Components/ShowPosts/ShowPosts';\nimport {shuffle} from '../../../../utils';\n\n\nimport './PostsFriends.css';\n\nconst GETPOSTS_MUTATION = gql`\n    mutation GetPosts($userid:ID!){\n        getPosts(userid:$userid){\n            id\n            body\n            createdAt\n            username\n            comments{\n                id\n                body\n                username\n                createdAt\n            }\n            likes{\n                id\n                userid\n                username\n                createdAt\n            }\n            likeCount\n            commentCount\n\n        }\n    }\n`;\n\n\nconst PostsFriends = ({friends}) => {\n\n    const [getPosts] = useMutation(GETPOSTS_MUTATION);\n    const [friendsPosts, setFriendsPosts] = useState([]); \n    \n    useEffect(()=>{\n        let fetchData = async () => {\n            if(!friends || friends.length===0)return;\n            let promises = [];\n\n            for(let friend of friends){\n                let userid = friend.userid;\n                let res = getPosts({variables:{userid}});\n    \n                promises.push(res);\n            }\n            \n            let responses = await Promise.all(promises);\n            \n            let posts = [];\n            for(let res of responses){\n                posts = posts.concat(res.data.getPosts.slice(0,10));\n            }\n\n            setFriendsPosts(shuffle(posts));\n        }\n        \n        fetchData()\n\n    },[friends, getPosts]);\n    return(\n        <div id=\"posts-friends-container\">\n            <div id=\"posts-friends-lists\">\n                <ShowPosts posts={friendsPosts}/>\n            </div>\n        </div>\n    );\n}\n\nconst stateToProps = state => {\n    return({\n        friends: state.friends\n    });\n}\n\nexport default connect(stateToProps, null)(PostsFriends);","import React from 'react';\n\nimport HeaderBar from '../../Components/HeaderBar/HeaderBar';\nimport Chat from '../../Components/Chat/Chat';\n\n\nimport NewPost from './Components/NewPost/NewPost';\nimport PostsFriends from './Components/PostsFriends/PostsFriends';\n\nconst Feed = () => {\n    return(\n        <div>\n            <HeaderBar/>\n            <NewPost/>\n            <PostsFriends />\n            \n            <Chat/>\n        </div>\n    );\n}\n\nexport default Feed;","import React from 'react';\nimport {useParams} from 'react-router-dom';\nimport {gql, useQuery} from '@apollo/client';\nimport {Typography} from '@material-ui/core';\nimport {AccountCircle} from '@material-ui/icons';\n\nimport './InfoUser.css';\n\nconst QUERY_GETUSER = gql`\n    query GetUserbyID($userid:ID!){\n        getUserbyID(userid:$userid){\n            email\n            username\n        }\n    }\n`;\n\nconst InfoUser = () => {\n    const {userid} = useParams();\n    const {data} = useQuery(QUERY_GETUSER,{variables:{userid}});\n\n    if(!data)return <div></div>; \n    const {email, username} = data.getUserbyID;\n\n    return(\n        <div >\n            <div className=\"info-user\">\n                <AccountCircle className=\"avatar-user\" style={{fontSize:200}}/>\n            </div>\n            <div className=\"info-user-text\">\n                <div className=\"info-user\">\n                    <Typography variant=\"h5\">{username}</Typography>\n                </div>\n                <div className=\"info-user\">\n                    <Typography variant=\"h5\">{email}</Typography>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default InfoUser;","import React from 'react';\n\nimport './SpinnerLoading.css';\n\nconst SpinnerLoading = () => {\n    return(\n        <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n    );\n}\n\nexport default SpinnerLoading;","import React,{useState} from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport {useParams} from 'react-router-dom';\nimport SpinnerLoading from '../../../../Components/SpinnerLoading/SpinnerLoading';\nimport ShowPosts from '../../../../Components/ShowPosts/ShowPosts';\n\nimport './PostsUser.css'\nimport { useEffect } from 'react';\n\n\nconst GETPOSTS_MUTATION = gql`\n    mutation GetPosts($userid:ID!){\n        getPosts(userid:$userid){\n            id\n            body\n            createdAt\n            username\n            comments{\n                id\n                body\n                username\n                createdAt\n            }\n            likes{\n                id\n                userid\n                username\n                createdAt\n            }\n            likeCount\n            commentCount\n\n        }\n    }\n`;\n\nconst PostsUser = () => {\n    const {userid} = useParams();\n    const [data, setData] = useState(null);\n    const [getPosts] = useMutation(GETPOSTS_MUTATION);\n\n    useEffect(()=>{\n        let fetch = async () => {\n            let {data} = await getPosts({variables:{userid}});\n            setData(data);\n        }\n        fetch();\n    },[userid, getPosts]);\n\n    if(!data)return <div></div>\n    let posts = data?.getPosts;\n    return(\n        <div className=\"posts-user-container\">\n            {!data ? <SpinnerLoading /> : <ShowPosts posts={posts} />}\n        </div>\n    );\n}\n\nexport default PostsUser;","import React, {useState} from 'react';\nimport {connect} from 'react-redux';\nimport {gql, useQuery, useMutation} from '@apollo/client';\nimport {useParams} from 'react-router-dom';\n\n\nimport {Button} from '@material-ui/core';\nimport './ADC.css';\nimport { useEffect } from 'react';\n\n\nconst QUERY_GETUSERBYID = gql`\n    query GetUserbyID($userid:ID!){\n        getUserbyID(userid:$userid){\n            username\n            friends{\n                userid\n            }\n        }\n    }\n`;\n\nconst MUTATION_ADDFRIEND = gql`\n    mutation AddFriend($userid:ID!){\n        addFriend(userid:$userid)\n    }\n`;\n\nconst MUTATION_REMOVEFRIEND = gql`\n    mutation RemoveFriend($userid:ID!){\n        removeFriend(userid:$userid)\n    }\n`;\n\nconst AddFriend = ({userid, setFriend, setFriends, friends, username}) => {\n    const [addFriend] = useMutation(MUTATION_ADDFRIEND);\n    const handleCLick = async () => {\n        await addFriend({variables:{userid}});\n        setFriend(true);\n\n        friends = friends.concat([{username, userid}]);\n        setFriends(friends);\n    }\n    return(\n        <Button variant=\"contained\" color=\"primary\" onClick={handleCLick}>\n            Add Friend\n        </Button>\n    );\n}\n\nconst RemoveFriend = ({userid, setFriend, setFriends, friends}) => {\n    const [removeFriend] = useMutation(MUTATION_REMOVEFRIEND);\n    \n    const handleCLick = async () => {\n        await removeFriend({variables:{userid}});\n        setFriend(false);\n\n        friends = friends.filter(friend => friend.userid !== userid);\n        setFriends(friends);\n    }\n    return(\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleCLick}>\n            Remove Friend\n        </Button>\n    );\n}\nconst ADC = ({user, setFriends, friends}) => {\n    const {userid} = useParams();\n    const {data} = useQuery(QUERY_GETUSERBYID,{variables:{userid}});\n   \n    const [friend, setFriend] = useState(false);\n\n    \n    //There are no friends for this user\n    \n    useEffect(()=>{\n        if(!data)return;\n        if(data.getUserbyID.friends){\n            let idxFriend =  data.getUserbyID.friends.find(friend => friend.userid === user.id);\n            if(idxFriend)setFriend(true);\n        }\n    },[data, user.id]);\n\n    if(userid === user.id)return <div>self profile</div>\n    if(!data)return <div>loading</div>\n\n    return(\n        <div className=\"ADC-button\">\n            {\n                friend ?\n                <RemoveFriend userid={userid} setFriend={setFriend} setFriends={setFriends} friends={friends}/> : \n                <AddFriend userid={userid} setFriend={setFriend} setFriends={setFriends} friends={friends} username={data.getUserbyID.username}/>\n            }\n        </div>\n    );\n}\n\nconst stateToProps = state => {\n    return({\n        user: state.user,\n        friends: state.friends\n    });\n}\n\nconst dispatchToProps = dispatch => {\n    return({\n        setFriends(friends){\n            dispatch({\n                friends,\n                type:'SET_FRIENDS'\n            });\n        }\n    });\n}\n\nexport default connect(stateToProps, dispatchToProps)(ADC);","import React from 'react';\n\nimport HeaderBar from '../../Components/HeaderBar/HeaderBar';\n\nimport InfoUser from './Components/InfoUser/InfoUser';\nimport PostsUser from './Components/PostsUser/PostsUser';\nimport ADC from './Components/AddDeleteContact/ADC';\n\nimport {Grid} from '@material-ui/core';\n\nconst Profile = () => {\n\n    return(\n        <>\n            <HeaderBar/>\n            <main>\n                <Grid container>\n                    <Grid xs={4} item style={{padding:40}}>\n                        <InfoUser/>\n                        <ADC/>\n                    </Grid>\n                    <Grid xs={6} item>\n                        <PostsUser/>\n                    </Grid>\n                    <Grid xs={2} item>\n                    </Grid>\n                </Grid>\n            </main>\n        </>\n    );\n}\n\n\nexport default Profile;","import React from 'react';\n\nimport {Typography} from '@material-ui/core';\nimport {AccountCircle}from '@material-ui/icons';\nimport './ListFriends.css';\n\nconst ListFriends = ({friends, setActiveChat}) => {\n\n    const handleClick = (friend) => () => {\n\n        setActiveChat(friend);\n    }\n    \n    return(\n        <>\n            {friends.map(friend => {\n                return(\n                    <div className=\"item-friend-chat\" key={friend.userid} onClick={handleClick(friend)}>\n                        <AccountCircle className=\"item-friend-chat-icon\" />\n                        <Typography\n                            className=\"item-friend-chat-username\"\n                        >\n                            {friend.username}\n                        </Typography>\n                    </div>\n                );\n            })}\n        </>\n    );\n}\n\nexport default ListFriends;","import React, { useState } from 'react';\nimport {gql, useMutation} from '@apollo/client';\nimport {IconButton, InputBase} from '@material-ui/core';\nimport {Send} from '@material-ui/icons';\n\nconst MUTATION_SENDMESSAGE = gql`\n    mutation SendMessage($chatid: ID!, $bodyMessage:String!){\n        sendMessage(chatid: $chatid, bodyMessage: $bodyMessage){\n            _id\n            createdAt\n        }\n    }\n`;\n\nconst SendMessage = ({_chatid}) => {\n    const [bodyMessage, setBodyMessage] = useState(\"\");\n    const [sendMessage] = useMutation(MUTATION_SENDMESSAGE);\n\n    const handleClick = async () => {\n        if(bodyMessage.length === 0)return;\n        await sendMessage({variables:{chatid: _chatid, bodyMessage}});\n        setBodyMessage('');\n    }\n    return(\n        <div id=\"send-message\">\n            <InputBase\n                className=\"input-chat-message\"\n                placeholder=\"write a message\"\n                value={bodyMessage}\n                onChange={(e)=>setBodyMessage(e.currentTarget.value)}\n            />\n            <IconButton onClick={handleClick}> \n                <Send className=\"input-chat-icon\" />\n            </IconButton>\n        </div>\n    );\n}\nexport default SendMessage;","import React, { useState, useEffect } from 'react';\nimport {gql, useMutation} from '@apollo/client';\nimport {connect} from 'react-redux';\nimport SendMessage from './SendMessage';\nimport moment from 'moment';\nimport {Typography} from '@material-ui/core';\nimport './ListMessages.css';\n\nconst MUTATION_CREATECHAT = gql`\n    mutation CreateChat($partnerid: ID!, $partnername: String!){\n        createChat(partnerid: $partnerid, partnername: $partnername){\n            _id\n            messages{\n                sender_id\n                sender_username\n                body_message\n                createdAt\n            }\n        }\n    }\n`;\n\nconst MUTATION_GETCHAT = gql`\n    mutation GetChat($chatid: ID!){\n        getChat(chatid: $chatid){\n            _id\n            messages{\n                sender_id\n                sender_username\n                body_message\n                createdAt\n            }\n        }\n    }\n`;\n\n\n\nconst ListMessages = ({chatid, activeChat, user}) => {\n    const [createChat] = useMutation(MUTATION_CREATECHAT);\n    const [getChat] = useMutation(MUTATION_GETCHAT);\n\n    const {userid, username} =  activeChat;\n\n    let [_chatid, setChatid] = useState(null);\n    let [messages, setMessages] = useState([]);\n\n    useEffect(()=>{\n\n        const fetchCreateChat = async () => {\n            let {data} = await createChat({variables:{partnerid:userid, partnername:username}});\n            setMessages(data.createChat.messages);\n            setChatid(data.createChat._id);\n        }\n        const fetchGetChat = async () => {\n            let {data} = await getChat({variables:{chatid}});\n            setMessages(data.getChat.messages);\n            setChatid(data.getChat._id);\n        }\n        if(!chatid){\n            fetchCreateChat();\n        }else{\n            fetchGetChat();\n        }\n    },[userid, username, createChat , getChat, chatid]);\n    \n    return(\n        <div id=\"list-messages-container\">\n            <div className=\"\">\n                {messages.map(message => {\n                    const {body_message, createdAt, sender_username} = message;\n                    return(\n                        <div className={user.username===sender_username?'sender-message':'reciver-message'}>\n                            <Typography variant=\"body2\" className={user.username===sender_username?'sender-message-body':'reciver-message-body'}>\n                                {body_message}\n                                <span className=\"createdAt-message\">{moment(createdAt).fromNow()}</span>\n                            </Typography>\n                        </div>\n                    );\n                }).reverse()}\n            </div>\n            \n            <SendMessage _chatid={_chatid}/>\n            \n        </div>\n    );\n}\n\nconst stateToProps = state => {\n    return({\n        user: state.user\n    });\n}\n\nexport default connect(stateToProps, null)(ListMessages);","import React from 'react';\nimport ListMessages from './ListMessages';\n\nconst Messages = ({chats, activeChat}) => {\n    \n    const {userid} =  activeChat;\n    let {chatid} = chats.filter(chat => chat.partnerid === userid)[0] || {};\n\n    return(\n        <ListMessages chatid={chatid} activeChat={activeChat}/>\n    );\n}\n\nexport default Messages;","import React, { useState, useEffect } from 'react';\nimport {connect} from 'react-redux';\nimport {gql, useQuery} from '@apollo/client';\n\nimport HeaderBar from '../../Components/HeaderBar/HeaderBar';\n\nimport ListFriends from './Components/ListFriends/ListFriends';\nimport Messages from './Components/Messages/Messages';\n\nimport {Card, Grid} from '@material-ui/core';\nimport './Chat.css';\n\nconst QUERY_GETCHATS = gql`\n    query GetUserbyID($userid: ID!){\n        getUserbyID(userid:$userid){\n            chats{\n                chatid\n                partnerid\n            }\n        }\n    }\n`;\nconst QUERY_GETUSERBYID = gql`\n    query GetUserbyID($userid: ID){\n        getUserbyID(userid: $userid){\n            friends{\n                userid,\n                username\n            }\n        }\n    }\n`;\n\nconst Chat = ({friends, setFriends, user}) => {\n\n\n\n    const {loading, data} = useQuery(QUERY_GETCHATS,{variables:{userid:user.id}});\n    const res = useQuery(QUERY_GETUSERBYID, {variables:{userid:user.id}});\n    \n    const [activeChat, setActiveChat] = useState(friends ?  friends[0] : null);\n    \n    useEffect(()=>{\n        if(res.data){\n            setFriends(res.data.getUserbyID.friends);\n            setActiveChat(res.data.getUserbyID.friends[0])\n        };\n    },[res]);\n\n    \n   \n    return(\n        <>\n            <HeaderBar/>\n            { \n                !activeChat ? \n                <div>You have not friends yet</div> :\n                <div id=\"messages-container\">\n                    <Card id=\"message-container-card\">\n                        <Grid className=\"grid-container-chat\" container >\n                            <Grid item xs={4} > \n                                <ListFriends friends={friends} setActiveChat={setActiveChat}/>\n                            </Grid>\n                            <Grid className=\"grid-item-messages\" item xs={8}>\n                                {\n                                    loading ? null :\n                                    <Messages chats={data.getUserbyID.chats} activeChat={activeChat} />\n                                }\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </div>\n            }\n        </>\n    );\n}\n\nconst stateToProps = state => {\n    return({\n        user: state.user,\n        friends: state.friends\n    });\n}\n\nconst dispatchToProps = dispatch => {\n    return({\n        setFriends(friends){\n            dispatch({\n                type: 'SET_FRIENDS',\n                friends\n            });\n        }\n    });\n}\n\nexport default connect(stateToProps, dispatchToProps)(Chat);","import React, {useEffect} from 'react';\nimport {BrowserRouter, Switch, Route, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {gql, useMutation} from '@apollo/client';\n\n\n//Views \nimport Home from './Views/Home/Home';\nimport Register from './Views/Register/Register';\nimport Login from './Views/Login/Login';\nimport Feed from './Views/Feed/Feed';\nimport Profile from './Views/Profile/Profile';\nimport Chat from './Views/Chat/Chat';\n\n\nconst VERIFYTOKEN_MUTATION = gql`\n    mutation VerifyToken($token:String){\n        verifyToken(token: $token){\n            id, username, email\n        }\n    }   \n`;\n\nconst Router = ({user, setUser}) => {\n\n    let token = localStorage.getItem('token');\n\n\n    const [verifyToken] = useMutation(VERIFYTOKEN_MUTATION);\n\n    useEffect(()=>{\n        let fetchData = async () => {\n            if(!token) return;\n            try{\n                let {data} = await verifyToken({variables:{token}});\n                setUser(data.verifyToken);\n            }catch(err){\n            }\n        };\n        fetchData();\n    },[setUser, token, verifyToken]);\n\n    return(\n        <BrowserRouter>\n            <Switch>\n                <Route exact path=\"/\">\n                    {user ? <Redirect to=\"/feed\" /> : <Home/>}\n                </Route>\n                <Route exact path=\"/login\" >\n                    {user ? <Redirect to=\"/feed\" /> : <Login/>}\n                </Route>\n                <Route exact path=\"/register\" >\n                    {user ? <Redirect to=\"/feed\" /> : <Register/>}\n                </Route>\n                \n                <Route exact path=\"/chat\">\n                    {user ? <Chat/> : <Home/>}\n                </Route>\n\n                <Route exact path=\"/profile/:userid\">\n                    {user ? <Profile/> : <Home/>}\n                </Route>\n                <Route exact path=\"/feed\">\n                    {user ? <Feed/> : <Home/>}\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nconst stateToProps = state => {\n    return({\n        user:state.user\n    });\n}\n\nconst dispatchToProps = dispatch => {\n    return({\n        setUser(user){\n            dispatch({\n                type:\"SET_USER\",\n                user\n            });\n        }\n    });\n}\nexport default connect(stateToProps, dispatchToProps)(Router);","import {createStore} from 'redux';\n\nconst initialState = {\n    user:null,\n    friends:null,\n    chats:[]\n}\n\nconst reducer = (state=initialState, action) => {\n    if(action.type === \"SET_USER\"){\n        return({\n            ...state,\n            user:action.user\n        });\n    }\n    if(action.type === \"SET_FRIENDS\"){\n        return({\n            ...state,\n            friends : action.friends\n        });\n    }\n    return state;\n}\n\nexport default createStore(reducer);","import { ApolloClient, InMemoryCache,  HttpLink, ApolloLink, concat} from '@apollo/client';\n\nconst httpLink = new HttpLink({ uri: process.env.REACT_APP_GRAPHQLSERVER });\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  let token = localStorage.getItem('token');\n  operation.setContext({\n    headers: {\n      authorization: token? `Bearer ${token}` : null,\n    }\n  });\n\n  return forward(operation);\n})\n\nconst client = new ApolloClient({\n  link: concat(authMiddleware, httpLink),\n  cache: new InMemoryCache()\n});\n\n\nexport default client;","import './App.css';\nimport Router from './Router';\n\nimport {Provider as ReduxProvider} from 'react-redux';\nimport store from './store';\n\nimport { ApolloProvider } from '@apollo/client';\nimport clientApollo from './apolloClient';\n\nfunction App() {\n  return (\n      <ReduxProvider store={store}>\n        <ApolloProvider client={clientApollo}>\n          <Router/>\n        </ApolloProvider>\n      </ReduxProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}